/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.LinkedHashMap;
import java.util.Set;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {

  private RobotWorldDec world;

  void setWorld(RobotWorld w) {
    world = (RobotWorldDec) w;
  }

  String salida = new String();

  // boolean command(uniandes.lym.robot.view.Console sistema) :
  final public boolean command(Console sistema) throws ParseException, Exception {
    int x,y;salida=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case inicio:
      label_1:
      while (true) {
        jj_consume_token(inicio);
        programa();
     try{Thread.sleep(900);}catch(InterruptedException e){System.err.format("IOException: %s%n",e);}

    sistema.printOutput(salida);{if (true) return true;}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case inicio:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      break;
    case 0:
      jj_consume_token(0);
           {if (true) return false;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void programa() throws ParseException, Exception {
    String x;
    LinkedHashMap<String,Integer>variables=new LinkedHashMap<String,Integer>();
    LinkedHashMap<String,LinkedHashMap<String,Integer>>procedimientos=new LinkedHashMap<String,LinkedHashMap<String,Integer>>();
    LinkedHashMap<String,LinkedList<String>>instruccionesproc=new LinkedHashMap<String,LinkedList<String>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case defvars:
      jj_consume_token(defvars);
      variables(variables);
      jj_consume_token(51);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case procini:
        jj_consume_token(procini);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case nombvp:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          x = jj_consume_token(nombvp).image;
                                                                 LinkedHashMap<String,Integer>procedimiento=new LinkedHashMap<String,Integer >();procedimientos.put(x,procedimiento);
          jj_consume_token(52);
          jj_consume_token(53);
          parametros(procedimiento);
          jj_consume_token(53);
          bloquep(procedimientos,variables,instruccionesproc);
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      bloque(procedimientos,variables,instruccionesproc,world);
      break;
    case procini:
      jj_consume_token(procini);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case nombvp:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        x = jj_consume_token(nombvp).image;
                               LinkedHashMap<String,Integer>procedimiento=new LinkedHashMap<String,Integer >();procedimientos.put(x,procedimiento);
        jj_consume_token(52);
        jj_consume_token(53);
        parametros(procedimiento);
        jj_consume_token(53);
        bloquep(procedimientos,variables,instruccionesproc);
      }
      bloque(procedimientos,variables,instruccionesproc,world);
      break;
    default:
      jj_la1[5] = jj_gen;
      bloque(procedimientos,variables,instruccionesproc,world);
    }
  }

  final public void variables(LinkedHashMap<String, Integer> variables) throws ParseException {
    String x;
    x = jj_consume_token(nombvp).image;
                                variables.put(x,0);
    label_4:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(54);
      x = jj_consume_token(nombvp).image;
                                                                                               variables.put(x,0);
    }
  }

  final public void parametros(LinkedHashMap<String, Integer> parametros) throws ParseException {
    String x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nombvp:
      x = jj_consume_token(nombvp).image;
                                 parametros.put(x,0);
      label_5:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(54);
        x = jj_consume_token(nombvp).image;
                                                                                                 parametros.put(x,0);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void bloque(LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, Integer> variables, LinkedHashMap<String, LinkedList<String>> instruccionesproc,
      RobotWorldDec world) throws ParseException, Exception {
    this.world=world;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    instrucciones(variables,procedimientos,instruccionesproc);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void instrucciones(LinkedHashMap<String, Integer> variables,
      LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGtO:
    case MOVE:
    case JUMP:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case MOVEtOtHE:
    case MOVEiNdIR:
    case JUMPtOtHE:
    case JUMPiNdIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
    case nombvp:
      listinstr(variables,procedimientos,instruccionesproc);
      label_6:
      while (true) {
        if (jj_2_3(2147483647)) {
          ;
        } else {
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          jj_consume_token(51);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        listinstr(variables,procedimientos,instruccionesproc);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void listinstr(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException, Exception {
        String nom,nom1;
        nom="";
        nom1="";
        int x,y;
        x=-1;
        y=-1;
        String z = null;
        String or = null;
    if (jj_2_5(2147483647)) {
      nom = jj_consume_token(nombvp).image;
      jj_consume_token(56);
      x = num();
                if (variables.containsKey(nom))
                {
                        variables.put(nom,x);
                    x=-1;
                }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSINGtO:
        jj_consume_token(ASSINGtO);
        jj_consume_token(57);
        x = num();
        jj_consume_token(54);
        nom = jj_consume_token(nombvp).image;
        if (variables.containsKey(nom))
                {
                        variables.put(nom,x);
                }
        break;
      case JUMP:
        jj_consume_token(JUMP);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          x = num();
          break;
        case nombvp:
          nom = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          y = num();
          break;
        case nombvp:
          nom1 = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (x==-1 && y==-1) {
                  if (variables.containsKey(nom) && variables.containsKey(nom1))
                        {
                                x = variables.get(nom);
                                y= variables.get(nom);
                        world.setPostion(x,y);
                        x=-1;
                        y=-1;
                        }
                  }
        else if (x==-1 && y!=-1)
        {
                  if (variables.containsKey(nom))
                        {
                                x = variables.get(nom);
                        world.setPostion(x,y);
                        x=-1;
                        y=-1;
                        }
        }
        else if (x!=-1 && y==-1)
        {
                  if (variables.containsKey(nom1))
                        {
                                y = variables.get(nom1);
                        world.setPostion(x,y);
                        x=-1;
                        y=-1;
                        }
        }
        else
        {
          world.setPostion(x,y);
                x=-1;
                y=-1;
        }
        break;
      case MOVE:
        jj_consume_token(MOVE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          x = num();
          break;
        case nombvp:
          nom = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (x==-1) {
                  if (variables.containsKey(nom))
                        {
                                x = variables.get(nom);
                        world.moveForward(x,true);
                        x=-1;
                        }
                  }
        else
        {
          world.moveForward(x,true);
                x=-1;
        }
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        put(Integer.parseInt(z.strip()), or); z =null;
        break;
      case PICK:
        jj_consume_token(PICK);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        pick(Integer.parseInt(z.strip()), or); z =null;
        break;
      case MOVEtOtHE:
        jj_consume_token(MOVEtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        moveToThe(Integer.parseInt(z.strip()),or); z =null;
        break;
      case MOVEiNdIR:
        jj_consume_token(MOVEiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        moveInDir(Integer.parseInt(z.strip()),or); z =null;
        break;
      case JUMPtOtHE:
        jj_consume_token(JUMPtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        jumpToThe(Integer.parseInt(z.strip()),or); z =null;
        break;
      case JUMPiNdIR:
        jj_consume_token(JUMPiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z)) { z = Integer.toString(variables.get(z));}
        jumpInDir(Integer.parseInt(z.strip()),or); z =null;
        break;
      case NOP:
        jj_consume_token(NOP);
        jj_consume_token(57);

        break;
      case TURN:
        jj_consume_token(TURN);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          nom = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          nom = jj_consume_token(RIGHT).image;
          break;
        case AROUND:
          nom = jj_consume_token(AROUND).image;
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (nom.equals("left"))
          {
            world.turnRight();
            world.turnRight();
            world.turnRight();
            nom="";
          }
         else if (nom.equals("around"))
          {
            world.turnRight();
            world.turnRight();
            nom="";
          }
          else if (nom.equals("right"))
          {
            world.turnRight();
            nom="";
           }
        break;
      case FACE:
        jj_consume_token(FACE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          nom = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          nom = jj_consume_token(SOUTH).image;
          break;
        case EAST:
          nom = jj_consume_token(EAST).image;
          break;
        case WEST:
          nom = jj_consume_token(WEST).image;
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                // Si el robot esta mirando al norte:
                if (world.getFacing()==0)
                {
                  if (nom=="north"){nom="";}
                  else if (nom.equals("east"))
                  {
                        world.turnRight();
                nom="";
                   }
                  else if (nom.equals("south") || nom.equals("around"))
                  {
                        world.turnRight();
                        world.turnRight();
                nom="";
                   }
                  else if (nom.equals("west"))
                  {
                        world.turnRight();
                        world.turnRight();
                        world.turnRight();
                nom="";
                   }
                }
                // Si el robot esta mirando al este:
                else if (world.getFacing()==2)
                {
                  if (nom.equals("north"))
                  {
                        world.turnRight();
                        world.turnRight();
                        world.turnRight();
                        nom="";
                  }
                  else if (nom.equals("east")){nom="";}
                  else if (nom.equals("south"))
                  {
                        world.turnRight();
                nom="";
                   }
                  else if (nom.equals("west") || nom.equals("around"))
                  {
                        world.turnRight();
                        world.turnRight();
                nom="";
                   }
                }
                // Si el robot esta mirando al oeste:
                else if (world.getFacing()==3)
                {
                  if (nom.equals("north"))
                  {
                        world.turnRight();
                nom="";
                  }
                  else if (nom.equals("east") || nom.equals("around"))
                  {
                        world.turnRight();
                        world.turnRight();
                nom="";
                   }
                  else if (nom.equals("south"))
                  {
                        world.turnRight();
                        world.turnRight();
                nom="";
                        }
                  else if (nom.equals("west")){nom="";}
                }
                // Si el robot esta mirando al sur:
                else if (world.getFacing()==1)
                {
                  if (nom.equals("north") || nom.equals("around"))
                  {
                        world.turnRight();
                        world.turnRight();
                nom="";
                  }
                  else if (nom.equals("east"))
                  {
                        world.turnRight();
                        world.turnRight();
                        world.turnRight();
                nom="";
                   }
                  else if (nom.equals("south")){nom="";}
                  else if (nom.equals("west"))
                  {
                        world.turnRight();
                nom="";
                   }
                }
        break;
      case nombvp:
        nom = jj_consume_token(nombvp).image;
        jj_consume_token(57);
          if (!procedimientos.containsKey(nom))
          {{if (true) throw new ParseException("El procedimiento "+nom+" no ha sido declarado anteriormente");}}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case nombvp:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            y = num();
            break;
          case nombvp:
            nom1 = jj_consume_token(nombvp).image;
                                             y =variables.get(nom1);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                x+=1;
                LinkedHashMap<String, Integer> procedimiento = procedimientos.get(nom);
                Set<String> keys = procedimiento.keySet();
                String[] llaves = new String[keys.size()];
                keys.toArray(llaves);
                int size = procedimiento.size();
                if (x <= size)
                {
                        String parametro = llaves[x];
                        procedimiento.put(parametro,y);
                }
          label_7:
          while (true) {
            if (jj_2_4(2147483647)) {
              ;
            } else {
              break label_7;
            }
            jj_consume_token(54);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
              y = num();
              break;
            case nombvp:
              nom1 = jj_consume_token(nombvp).image;
                                                                             y =variables.get(nom1);
              break;
            default:
              jj_la1[29] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
                x+=1;
                LinkedHashMap<String, Integer> procedimiento1 = procedimientos.get(nom);
                Set<String> keys1 = procedimiento1.keySet();
                String[] llaves1 = new String[keys1.size()];
                keys1.toArray(llaves1);
                int size1 = procedimiento1.size();
                if (x <= size1)
                {
                        String parametro = llaves1[x];
                        procedimiento1.put(parametro,y);
                }
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
          LinkedHashMap<String, Integer> procedimiento = procedimientos.get(nom);
          LinkedList<String > listainstrucciones = instruccionesproc.get(nom);
          String instrucciones= "";
          int centinela = 0;
          String nombreinstruccion;
          int fin = listainstrucciones.size();
          for (String instruccion: listainstrucciones)
          {
            centinela+=1;
                String parametrosp = "";
            String[] partesinstruccion = instruccion.split("\u005c\u005c:");

            if (partesinstruccion.length > 1) {
            nombreinstruccion = partesinstruccion[0];
                String parteuno = partesinstruccion[1];
                String[] parametrosv = parteuno.split(",");
                int centinela2 = 0;
                int cantidad = parametrosv.length;
                for (String parametro: parametrosv)
                {
                        centinela2+=1;
                        if (parametro.equals("right") || parametro.equals("left") || parametro.equals("north") || parametro.equals("south") || parametro.equals("east") || parametro.equals("west") || parametro.equals("around"))
                        {
                                parametrosp+=parametro;
                        }
                        else {
                          if (procedimiento.containsKey(parametro))
                          {
                                String valor = (procedimiento.get(parametro)).toString();
                                parametrosp+=valor;
                        }
                          else
                          {
                            if (variables.containsKey(parametro)) {
                                String valor = (variables.get(parametro)).toString();
                                parametrosp+=valor; }

                                else {
                                  String valor= parametro.toString();
                                  parametrosp+=valor;
                                }
                          }
                        if (centinela2!=cantidad)
                        {
                        parametrosp+=",";
                        }
                   }
                }
            }
                else {
                  nombreinstruccion = partesinstruccion[0];
                  parametrosp="";
                }
            instrucciones+=nombreinstruccion+":"+parametrosp;
            if (centinela!=fin)
            {
                instrucciones+=";";
            }
          }
          InputStream entrada = new ByteArrayInputStream(instrucciones.getBytes(StandardCharsets.UTF_8));
          Robot parser = new Robot(entrada);
          parser.bloque(procedimientos,variables,instruccionesproc,world);
        break;
      case IF:
      case WHILE:
      case REPEAT:
        estrucontrol(variables,procedimientos,instruccionesproc);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void estrucontrol(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException, Exception {
  boolean condicion;
  String condicionw="";
  String condiciones="";
  String x ="";
  int y ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        x = jj_consume_token(NOT).image;
        jj_consume_token(57);
        condicion = condiciones(variables,procedimientos,instruccionesproc,world);
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        condicion = condiciones(variables,procedimientos,instruccionesproc,world);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(THEN);
      jj_consume_token(57);
    if (!x.equals(""))
    {
      condicion= !condicion;
    }
    if(condicion==true)
        {
        bloque(procedimientos,variables,instruccionesproc,world);
    }
        else
        {
        consumeblock();
        }
      jj_consume_token(ELSE);
      jj_consume_token(57);
    if(condicion==true)
        {
        consumeblock();
    }
        else
        {
        bloque(procedimientos,variables,instruccionesproc,world);
        }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        x = jj_consume_token(NOT).image;
        jj_consume_token(57);
        condicionw = guardarcondicion(variables,procedimientos,instruccionesproc);
                                                                                                                   condiciones+=x+condicionw;
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        condicionw = guardarcondicion(variables,procedimientos,instruccionesproc);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DO);
      jj_consume_token(57);
      LinkedHashMap<String,Integer> procedimientow = new LinkedHashMap<String,Integer>();
      procedimientos.put("while",procedimientow);
      bloquep(procedimientos,variables,instruccionesproc);
          InputStream entradaini = new ByteArrayInputStream(condicionw.getBytes(StandardCharsets.UTF_8));
          Robot parserini = new Robot(entradaini);
          boolean condini = parserini.condiciones(variables,procedimientos,instruccionesproc,world);
          while (condini)
          {
                  LinkedList<String > listainstrucciones = instruccionesproc.get("while");
                  String instrucciones= "[";
                  int centinela = 0;
                  int fin = listainstrucciones.size();
                  for (String instruccion: listainstrucciones)
                  {
                    centinela+=1;
                    instrucciones+=instruccion;
                    if (centinela!=fin)
                    {
                        instrucciones+=";";
                    }
                  }
                  instrucciones+= "]";
                  InputStream entrada = new ByteArrayInputStream(instrucciones.getBytes(StandardCharsets.UTF_8));
                  Robot parser = new Robot(entrada);
                  parser.bloque(procedimientos,variables,instruccionesproc,world);
                  InputStream entradacond = new ByteArrayInputStream(condicionw.getBytes(StandardCharsets.UTF_8));
                  Robot parsercond = new Robot(entradacond);
                  parsercond.condiciones(variables,procedimientos,instruccionesproc,world);
        }
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(57);
      y = num();
          if (y==0)
          {}
      LinkedHashMap<String,Integer> procedimientor = new LinkedHashMap<String,Integer>();
      procedimientos.put("repeat",procedimientor);
          int centinela1 = 0;
      bloquep(procedimientos,variables,instruccionesproc);
          while (centinela1 < y)
          {
                  LinkedList<String > listainstrucciones = instruccionesproc.get("repeat");
                  String instrucciones= "[";
                  int centinela = 0;
                  int fin = listainstrucciones.size();
                  for (String instruccion: listainstrucciones)
                  {
                    centinela+=1;
                    instrucciones+=instruccion;
                    if (centinela!=fin)
                    {
                        instrucciones+=";";
                    }
                  }
                  instrucciones+= "]";
                  InputStream entrada = new ByteArrayInputStream(instrucciones.getBytes(StandardCharsets.UTF_8));
                  Robot parser = new Robot(entrada);
                  parser.bloque(procedimientos,variables,instruccionesproc,world);
                  centinela1+=1;
        }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void consumeblock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGtO:
    case MOVE:
    case JUMP:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case MOVEtOtHE:
    case MOVEiNdIR:
    case JUMPtOtHE:
    case JUMPiNdIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
    case nombvp:
      consumelistinstr();
      label_8:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(51);
        consumelistinstr();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

  final public void consumelistinstr() throws ParseException {
    if (jj_2_8(2147483647)) {
      jj_consume_token(nombvp);
      jj_consume_token(56);
      num();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
        jj_consume_token(MOVE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case ASSINGtO:
        jj_consume_token(ASSINGtO);
        jj_consume_token(57);
        num();
        jj_consume_token(54);
        jj_consume_token(nombvp);
        break;
      case JUMP:
        jj_consume_token(JUMP);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TURN:
        jj_consume_token(TURN);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case AROUND:
          jj_consume_token(AROUND);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FACE:
        jj_consume_token(FACE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          jj_consume_token(NORTH);
          break;
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PICK:
        jj_consume_token(PICK);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHIPS:
          jj_consume_token(CHIPS);
          break;
        case BALLOONS:
          jj_consume_token(BALLOONS);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MOVEtOtHE:
        jj_consume_token(MOVEtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MOVEiNdIR:
        jj_consume_token(MOVEiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          jj_consume_token(NORTH);
          break;
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case JUMPtOtHE:
        jj_consume_token(JUMPtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          jj_consume_token(LEFT);
          break;
        case RIGHT:
          jj_consume_token(RIGHT);
          break;
        case FRONT:
          jj_consume_token(FRONT);
          break;
        case BACK:
          jj_consume_token(BACK);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case JUMPiNdIR:
        jj_consume_token(JUMPiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case nombvp:
          jj_consume_token(nombvp);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          jj_consume_token(NORTH);
          break;
        case SOUTH:
          jj_consume_token(SOUTH);
          break;
        case WEST:
          jj_consume_token(WEST);
          break;
        case EAST:
          jj_consume_token(EAST);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case NOP:
        jj_consume_token(NOP);
        jj_consume_token(57);
        break;
      case nombvp:
        jj_consume_token(nombvp);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          label_9:
          while (true) {
            if (jj_2_7(2147483647)) {
              ;
            } else {
              break label_9;
            }
            jj_consume_token(54);
            num();
          }
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        break;
      case IF:
      case WHILE:
      case REPEAT:
        consumeestrucontrol();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void consumeestrucontrol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(57);
        consumecondiciones();
        jj_consume_token(58);
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        consumecondiciones();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(THEN);
      jj_consume_token(57);
      consumeblock();
      jj_consume_token(ELSE);
      jj_consume_token(57);
      consumeblock();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(57);
        consumecondiciones();
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        consumecondiciones();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DO);
      jj_consume_token(57);
      consumeblock();
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        num();
        break;
      case nombvp:
        jj_consume_token(nombvp);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      consumeblock();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void consumecondiciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      jj_consume_token(FACING);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        jj_consume_token(NORTH);
        break;
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANmOVEiNdIR:
      jj_consume_token(CANmOVEiNdIR);
      jj_consume_token(57);
      num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        jj_consume_token(NORTH);
        break;
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANjUMPiNdIR:
      jj_consume_token(CANjUMPiNdIR);
      jj_consume_token(57);
      num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        jj_consume_token(NORTH);
        break;
      case SOUTH:
        jj_consume_token(SOUTH);
        break;
      case EAST:
        jj_consume_token(EAST);
        break;
      case WEST:
        jj_consume_token(WEST);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANmOVEtOtHE:
      jj_consume_token(CANmOVEtOtHE);
      jj_consume_token(57);
      num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANjUMPtOtHE:
      jj_consume_token(CANjUMPtOtHE);
      jj_consume_token(57);
      num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case FRONT:
        jj_consume_token(FRONT);
        break;
      case BACK:
        jj_consume_token(BACK);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANpUT:
      jj_consume_token(CANpUT);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        num();
        break;
      case nombvp:
        jj_consume_token(nombvp);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CANpICK:
      jj_consume_token(CANpICK);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        num();
        break;
      case nombvp:
        jj_consume_token(nombvp);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public boolean condiciones(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc, RobotWorldDec world) throws ParseException {
    this.world = world;
    String nom;
    int x;
    x=-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      jj_consume_token(FACING);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        nom = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        nom = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        nom = jj_consume_token(EAST).image;
        break;
      case WEST:
        nom = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        if (world.getFacing()==0 && nom.equals("north"))
                        {
                          {if (true) return true;}
                        }
                        else if (world.getFacing()==1 && nom.equals("south"))
                        {
                          {if (true) return true;}
                        }
                        else if (world.getFacing()==2 && nom.equals("east"))
                        {
                          {if (true) return true;}
                        }
                        else if (world.getFacing()==3 && nom.equals("west"))
                        {
                          {if (true) return true;}
                        }
                        else
                        {
                          {if (true) return false;}
                        }
      break;
    case CANmOVEiNdIR:
      jj_consume_token(CANmOVEiNdIR);
      jj_consume_token(57);
      x = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        nom = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        nom = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        nom = jj_consume_token(EAST).image;
        break;
      case WEST:
        nom = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  int centinela = 0;
                  Point position = new Point(world.getPosition());
                  if(nom.equals("south"))
                  {
                    if (position.getY()+x >8)
                    {
                      {if (true) return false;}
                    }
                    if (centinela==x)
                    {{if (true) return true;}}
                    while (centinela!=x)
                    {
                        position.setLocation((position.getX()),(position.getY()+1));
                        if (world.isBlocked(position))
                        {
                                        {if (true) return false;}
                                }
                                centinela+=1;
              if (centinela == x){
                {if (true) return true;}
              }
                        }
                 }
                  if(nom.equals("north"))
                  {
                    if (position.getY()-x<1)
                    {
                      {if (true) return false;}
                    }
                    if (centinela==x)
                    {{if (true) return true;}}
                    while (centinela!=x)
                    {
                        position.setLocation((position.getX()),(position.getY()-1));
                        if (world.isBlocked(position))
                        {
                                        {if (true) return false;}
                                }
                                centinela+=1;
              if (centinela == x){
                {if (true) return true;}
              }
                        }
                  }
                  if(nom.equals("east"))
                  {
                    if (position.getX()+x >8)
                    {
                      {if (true) return false;}
                    }
                    if (centinela==x)
                    {{if (true) return true;}}
                    while (centinela!=x)
                    {
                        position.setLocation((position.getX()+1),(position.getY()));
                        if (world.isBlocked(position))
                        {
                                        {if (true) return false;}
                                }
                                centinela+=1;
              if (centinela == x){
                {if (true) return true;}
              }
                        }
                  }
                  if(nom.equals("west"))
                  {
                    if (position.getX()-x <1)
                    {
                      {if (true) return false;}
                    }
                    if (centinela==x)
                    {{if (true) return true;}}
                    while (centinela!=x)
                    {
                        position.setLocation((position.getX()-1),(position.getY()));
                        if (world.isBlocked(position))
                        {
                                        {if (true) return false;}
                                }
                                centinela+=1;
              if (centinela == x){
                {if (true) return true;}
              }
                        }
                  }
      break;
    case CANmOVEtOtHE:
      jj_consume_token(CANmOVEtOtHE);
      jj_consume_token(57);
      x = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
        nom = jj_consume_token(RIGHT).image;
        break;
      case FRONT:
        nom = jj_consume_token(FRONT).image;
        break;
      case BACK:
        nom = jj_consume_token(BACK).image;
        break;
      case LEFT:
        nom = jj_consume_token(LEFT).image;
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  int bandera = 0;
                  Point position2 = new Point(world.getPosition());

          if(nom.equals("back"))
            {
                    if (position2.getY()+x >8)
                    {
                      {if (true) return false;}
                    }
                    if (bandera==x)
                    {{if (true) return true;}}
                    while (bandera!=x)
                    {
                        position2.setLocation((position2.getX()),(position2.getY()+1));
                        if (world.isBlocked(position2))
                        {
                                        {if (true) return false;}
                                }
                                bandera+=1;
              if (bandera == x){
                {if (true) return true;}
              }
                          }
                   }

          if(nom.equals("front"))
              {
                    if (position2.getY()-x <1)
                    {
                      {if (true) return false;}
                    }
                    if (bandera==x)
                    {{if (true) return true;}}
                    while (bandera!=x)
                    {
                        position2.setLocation((position2.getX()),(position2.getY()-1));
                        if (world.isBlocked(position2))
                        {
                                        {if (true) return false;}
                                }
                                bandera+=1;
                if (bandera== x){
                {if (true) return true;}
              }
                          }
                   }

          if(nom.equals("right"))
              {
                    if (position2.getX()+x >8)
                    {
                      {if (true) return false;}
                    }
                    if (bandera==x)
                    {{if (true) return true;}}
                    while (bandera!=x)
                    {
                        position2.setLocation((position2.getX()+1),(position2.getY()));
                        if (world.isBlocked(position2))
                        {
                                        {if (true) return false;}
                                }
                                bandera+=1;
                if (bandera == x){
                {if (true) return true;}
              }
                          }
                   }

          if(nom.equals("left"))
              {
                    if (position2.getX()-x <1)
                    {
                      {if (true) return false;}
                    }
                    if (bandera==x)
                    {{if (true) return true;}}
                    while (bandera!=x)
                    {
                        position2.setLocation((position2.getX()-1),(position2.getY()));
                        if (world.isBlocked(position2))
                        {
                                        {if (true) return false;}
                                }
                                bandera+=1;
                if (bandera == x){
                {if (true) return true;}
              }
                          }
                   }
      break;
    case CANjUMPiNdIR:
      jj_consume_token(CANjUMPiNdIR);
      jj_consume_token(57);
      x = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        nom = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        nom = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        nom = jj_consume_token(EAST).image;
        break;
      case WEST:
        nom = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  Point position3 = new Point(world.getPosition());
                  if(nom.equals("south"))
                  {
                    if (position3.getY()+x >8)
                    {
                      {if (true) return false;}
                    }

            position3.setLocation((position3.getX()),(position3.getY()+x));

            if (world.isBlocked(position3))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }

                  }
                  if(nom.equals("north"))
                  {
                    if (position3.getY()-x<1)
                    {
                      {if (true) return false;}
                    }

            position3.setLocation((position3.getX()),(position3.getY()-1));

            if (world.isBlocked(position3))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
                  }
                  if(nom.equals("east"))
                  {
                    if (position3.getX()+x >8)
                    {
                      {if (true) return false;}
                    }

            position3.setLocation((position3.getX()+x),(position3.getY()));

            if (world.isBlocked(position3))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
          }
                  if(nom.equals("west"))
                  {
                    if (position3.getX()-x <1)
                    {
                      {if (true) return false;}
                    }

            position3.setLocation((position3.getX()-x),(position3.getY()));

            if (world.isBlocked(position3))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
          }
      break;
    case CANjUMPtOtHE:
      jj_consume_token(CANjUMPtOtHE);
      jj_consume_token(57);
      x = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        nom = jj_consume_token(LEFT).image;
        break;
      case RIGHT:
        nom = jj_consume_token(RIGHT).image;
        break;
      case FRONT:
        nom = jj_consume_token(FRONT).image;
        break;
      case BACK:
        nom = jj_consume_token(BACK).image;
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  Point position4 = new Point(world.getPosition());
                  if(nom.equals("back"))
                  {
                    if (position4.getY()+x >8)
                    {
                      {if (true) return false;}
                    }

            position4.setLocation((position4.getX()),(position4.getY()+x));

            if (world.isBlocked(position4))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }

                  }
                  if(nom.equals("front"))
                  {
                    if (position4.getY()-x<1)
                    {
                      {if (true) return false;}
                    }

            position4.setLocation((position4.getX()),(position4.getY()-1));

            if (world.isBlocked(position4))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
                  }
                  if(nom.equals("right"))
                  {
                    if (position4.getX()+x >8)
                    {
                      {if (true) return false;}
                    }

            position4.setLocation((position4.getX()+x),(position4.getY()));

            if (world.isBlocked(position4))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
          }
                  if(nom.equals("left"))
                  {
                    if (position4.getX()-x <1)
                    {
                      {if (true) return false;}
                    }

            position4.setLocation((position4.getX()-x),(position4.getY()));

            if (world.isBlocked(position4))
                        {
                                        {if (true) return false;}
                                }
                  else
                                {
                                  {if (true) return true;}
                                }
          }
      break;
    case CANpUT:
      jj_consume_token(CANpUT);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        x = num();
        break;
      case nombvp:
        nom = jj_consume_token(nombvp).image;
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        nom = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        nom = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    if (x==-1) {
                  if (variables.containsKey(nom))
                        {
                                x = variables.get(nom);
                                if(nom.equals("balloons")){
            try {world.putBalloons(x);world.popBalloons(x); {if (true) return true;}  }

                        catch (Error e){
                                  {if (true) return false;}}
          }else if(nom.equals("chips")){
            {if (true) return vDrop(x);}
          }

                        x=-1;
                        }
                  }
    else {
      if(nom.equals("balloons")){
          try {world.putBalloons(x);world.popBalloons(x); {if (true) return true;}  }

                        catch (Error e){
                                  {if (true) return false;}}
      }else if(nom.equals("chips")){
        {if (true) return vDrop(x);}
      }
      x=-1;
    }
      break;
    case CANpICK:
      jj_consume_token(CANpICK);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        x = num();
        break;
      case nombvp:
        nom = jj_consume_token(nombvp).image;
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        nom = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        nom = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (x==-1) {
                  if (variables.containsKey(nom))
                        {
                                x = variables.get(nom);
                                if(nom.equals("balloons")){
            try {world.popBalloons(x);world.putBalloons(x); {if (true) return true;}  }

                        catch (Error e){
                                  {if (true) return false;}}

          }else if(nom.equals("chips")){
            int x2 = (int)world.getPosition().getX();
                          int y  =(int) world.getPosition().getY();
                          boolean f2= true;
                          for (int i = y ; i<9;i++) {
              Point temp = new Point(x2,i );
                            if (!world.chipExists(temp)) { f2= false;}
            }
                          if ( f2 && y+x <=9) { {if (true) return true;}} else { {if (true) return false;}}
          }

                        x=-1;
                        }
                  }
    else {
      if(nom.equals("balloons")){
          try {world.popBalloons(x);world.putBalloons(x); {if (true) return true;}  }

                        catch (Error e){
                          {if (true) return false;}}

      }else if(nom.equals("chips")){
        int x2 = (int)world.getPosition().getX();
                          int y  =(int) world.getPosition().getY();
                          boolean f2= true;
                          for (int i = y ; i<9;i++) {
              Point temp = new Point(x2,i );
                            if (!world.chipExists(temp)) { f2= false;}
            }
                          if ( f2 && y+x <=9) { {if (true) return true;}} else { {if (true) return false;}}
          }
      }
      x=-1;
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void bloquep(LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, Integer> variables, LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    instruccionesp(variables,procedimientos,instruccionesproc);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
  }

  final public void instruccionesp(LinkedHashMap<String, Integer> variables,
      LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGtO:
    case MOVE:
    case JUMP:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case MOVEtOtHE:
    case MOVEiNdIR:
    case JUMPtOtHE:
    case JUMPiNdIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
    case nombvp:
      listinstrp(variables,procedimientos,instruccionesproc);
      label_10:
      while (true) {
        if (jj_2_9(2147483647)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(51);
        listinstrp(variables,procedimientos,instruccionesproc);
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
  }

  final public void listinstrp(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException {
        String variable;
        String variable1;
        int numero;
        int numero1;
        numero = -1;
        numero1 = -1;
        variable = "";
        variable1 = "";
        String instrucciones = "";
        String z = null;
        String or = null;
    if (jj_2_11(2147483647)) {
      variable = jj_consume_token(nombvp).image;
      jj_consume_token(56);
      numero = num();
                                               instrucciones=variable+"="+numero;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nombvp:
        jj_consume_token(nombvp);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          label_11:
          while (true) {
            if (jj_2_10(2147483647)) {
              ;
            } else {
              break label_11;
            }
            jj_consume_token(54);
            num();
          }
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }

        break;
      case MOVE:
        jj_consume_token(MOVE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z))
          {
                instrucciones="move"+":"+variables.get(z);
          }
          else
          {
                instrucciones="move"+":"+z;
          }
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z))
          {
                instrucciones="put"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="put"+":"+z+","+or;
          }
        break;
      case PICK:
        jj_consume_token(PICK);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z))
          {
                instrucciones="pick"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="pick"+":"+z+","+or;
          }
        break;
      case MOVEtOtHE:
        jj_consume_token(MOVEtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="moveToThe"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="moveToThe"+":"+z+","+or;
          }
        break;
      case MOVEiNdIR:
        jj_consume_token(MOVEiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="moveInDir"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="moveInDir"+":"+z+","+or;
          }
        break;
      case JUMPtOtHE:
        jj_consume_token(JUMPtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="jumpToThe"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="jumpToThe"+":"+z+","+or;
          }
        break;
      case JUMPiNdIR:
        jj_consume_token(JUMPiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="jumpInDir"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="jumpInDir"+":"+z+","+or;
          }
        break;
      case ASSINGtO:
        jj_consume_token(ASSINGtO);
        jj_consume_token(57);
        numero = num();
        jj_consume_token(54);
        variable = jj_consume_token(nombvp).image;
          if (variables.containsKey(variable))
          {
                instrucciones="assignTo"+":"+numero+","+variable;
          }
        break;
      case JUMP:
        jj_consume_token(JUMP);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          numero = num();
          break;
        case nombvp:
          variable = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          numero1 = num();
          break;
        case nombvp:
          variable1 = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (numero==-1 && numero1==-1)
          {
                instrucciones="JUMP"+":"+variable+","+variable1;
          }
          else if (numero==-1 && numero1!=-1)
          {
                instrucciones="JUMP"+":"+variable+","+numero1;
          }
          else if (numero!=-1 && numero1==-1)
          {
                instrucciones="JUMP"+":"+numero+","+variable1;
          }
          else
          {
                instrucciones="JUMP"+":"+numero+","+numero1;
          }
        break;
      case TURN:
        jj_consume_token(TURN);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          variable = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          variable = jj_consume_token(RIGHT).image;
          break;
        case AROUND:
          variable = jj_consume_token(AROUND).image;
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                instrucciones="turn"+":"+variable;
        break;
      case FACE:
        jj_consume_token(FACE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          variable = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          variable = jj_consume_token(SOUTH).image;
          break;
        case EAST:
          variable = jj_consume_token(EAST).image;
          break;
        case WEST:
          variable = jj_consume_token(WEST).image;
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (numero==-1)
          {
                instrucciones="face"+":"+variable;
          }
        break;
      case NOP:
        jj_consume_token(NOP);
        jj_consume_token(57);
          instrucciones="nop"+":";
        break;
      case IF:
      case WHILE:
      case REPEAT:
        instrucciones = estrucontrolp(variables,procedimientos,instruccionesproc);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                Set<String> keys = procedimientos.keySet();
                String[] llaves = new String[keys.size()];
                keys.toArray(llaves);
                int size = llaves.length;
                String parametro = llaves[size-1];
                LinkedList<String > instruccion = instruccionesproc.get(parametro);
                if (instruccion==(null))
                {
                        instruccion = new LinkedList<String >();
                        instruccion.add(instrucciones);
                        instruccionesproc.put(parametro,instruccion);
                }
                else
                {
                        instruccion.add(instrucciones);
                        instruccionesproc.put(parametro,instruccion);
                }
  }

  final public String estrucontrolp(LinkedHashMap<String, Integer> variables,
      LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException {
    String instrucciones="";String condiciones;String x=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
          instrucciones+="if"+":";
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(57);
        condiciones = condicionesp(variables,procedimientos,instruccionesproc);
                                                                                                                    instrucciones+="not"+":"+condiciones;
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        condiciones = condicionesp(variables,procedimientos,instruccionesproc);
                                                                                                                                                                                                                                instrucciones+=condiciones;
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(THEN);
      jj_consume_token(57);
      bloquep(procedimientos,variables,instruccionesproc);
      jj_consume_token(ELSE);
      jj_consume_token(57);
      bloquep(procedimientos,variables,instruccionesproc);
                                                                                                                                                                                                                                                                                                                                                                                        {if (true) return instrucciones;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
             instrucciones+="while"+":";
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(57);
        condiciones = condicionesp(variables,procedimientos,instruccionesproc);
                                                                                                                          instrucciones+="not"+":"+condiciones;
        break;
      case FACING:
      case CANpUT:
      case CANpICK:
      case CANmOVEiNdIR:
      case CANjUMPiNdIR:
      case CANmOVEtOtHE:
      case CANjUMPtOtHE:
        condiciones = condicionesp(variables,procedimientos,instruccionesproc);
                                                                                                                                                                                                                                      instrucciones+=condiciones;
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                                                                                                                                                    instrucciones+="do";
      jj_consume_token(DO);
      jj_consume_token(57);
      bloquep(procedimientos,variables,instruccionesproc);
                                                                                                                                                                                                                                                                                                                                                    {if (true) return"while";}
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        x = jj_consume_token(NUM).image;
        break;
      case nombvp:
        x = jj_consume_token(nombvp).image;
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          if (variables.containsKey(x))
          {
                instrucciones="repeat"+":"+variables.get(x);
          }
          else
          {
                instrucciones="repeat"+":"+x;
          }
      bloquep(procedimientos,variables,instruccionesproc);
                                                         {if (true) return "repeat";}
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String condicionesp(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException {
  String x;
  int y;
  String s;
  x="";
  y=-1;
  s="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      jj_consume_token(FACING);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "facing"+":"+x;}
      break;
    case CANmOVEiNdIR:
      jj_consume_token(CANmOVEiNdIR);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canMoveInDir"+":"+y+","+x;}
      break;
    case CANjUMPiNdIR:
      jj_consume_token(CANjUMPiNdIR);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canJumpInDir"+":"+y+","+x;}
      break;
    case CANmOVEtOtHE:
      jj_consume_token(CANmOVEtOtHE);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        x = jj_consume_token(FRONT).image;
        break;
      case BACK:
        x = jj_consume_token(BACK).image;
        break;
      case RIGHT:
        x = jj_consume_token(RIGHT).image;
        break;
      case LEFT:
        x = jj_consume_token(LEFT).image;
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canMoveToThe"+":"+y+","+x;}
      break;
    case CANjUMPtOtHE:
      jj_consume_token(CANjUMPtOtHE);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        x = jj_consume_token(FRONT).image;
        break;
      case BACK:
        x = jj_consume_token(BACK).image;
        break;
      case RIGHT:
        x = jj_consume_token(RIGHT).image;
        break;
      case LEFT:
        x = jj_consume_token(LEFT).image;
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canJumpToThe"+":"+y+","+x;}
      break;
    case CANpUT:
      jj_consume_token(CANpUT);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        y = num();
        break;
      case nombvp:
        s = jj_consume_token(nombvp).image;
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        x = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        x = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          if (y==-1)
          {
                {if (true) return"canPut"+":"+s+","+x;}
          }
          else
          {
                {if (true) return "canPut"+":"+y+","+x;}
          }
      break;
    case CANpICK:
      jj_consume_token(CANpICK);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        y = num();
        break;
      case nombvp:
        s = jj_consume_token(nombvp).image;
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        x = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        x = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        if (y==-1)
          {
                {if (true) return"canPick"+":"+s+","+x;}
          }
          else
          {
                {if (true) return "canPick"+":"+y+","+x;}
          }
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String guardarcondicion(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException {
  String x;
  int y;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      jj_consume_token(FACING);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "facing"+":"+x;}
      break;
    case CANmOVEiNdIR:
      jj_consume_token(CANmOVEiNdIR);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canMoveInDir"+":"+y+","+x;}
      break;
    case CANjUMPiNdIR:
      jj_consume_token(CANjUMPiNdIR);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORTH:
        x = jj_consume_token(NORTH).image;
        break;
      case SOUTH:
        x = jj_consume_token(SOUTH).image;
        break;
      case EAST:
        x = jj_consume_token(EAST).image;
        break;
      case WEST:
        x = jj_consume_token(WEST).image;
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canJumpInDir"+":"+y+","+x;}
      break;
    case CANmOVEtOtHE:
      jj_consume_token(CANmOVEtOtHE);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        x = jj_consume_token(FRONT).image;
        break;
      case BACK:
        x = jj_consume_token(BACK).image;
        break;
      case RIGHT:
        x = jj_consume_token(RIGHT).image;
        break;
      case LEFT:
        x = jj_consume_token(LEFT).image;
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canMoveToThe"+":"+y+","+x;}
      break;
    case CANjUMPtOtHE:
      jj_consume_token(CANjUMPtOtHE);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRONT:
        x = jj_consume_token(FRONT).image;
        break;
      case BACK:
        x = jj_consume_token(BACK).image;
        break;
      case RIGHT:
        x = jj_consume_token(RIGHT).image;
        break;
      case LEFT:
        x = jj_consume_token(LEFT).image;
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canJumpToThe"+":"+y+","+x;}
      break;
    case CANpUT:
      jj_consume_token(CANpUT);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        x = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        x = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canPut"+":"+y+","+x;}
      break;
    case CANpICK:
      jj_consume_token(CANpICK);
      jj_consume_token(57);
      y = num();
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        x = jj_consume_token(BALLOONS).image;
        break;
      case CHIPS:
        x = jj_consume_token(CHIPS).image;
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return "canPick"+":"+y+","+x;}
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String guardarbloque(LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, Integer> variables, LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException {
       {if (true) return"["+guardarinstrucciones(variables,procedimientos,instruccionesproc)+"]";}
    throw new Error("Missing return statement in function");
  }

  final public String guardarinstrucciones(LinkedHashMap<String, Integer> variables,
      LinkedHashMap<String, LinkedHashMap<String, Integer>> procedimientos,
      LinkedHashMap<String, LinkedList<String>> instruccionesproc) throws ParseException {
    LinkedList<String>listrucciones=new LinkedList<String>();String truccion;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGtO:
    case MOVE:
    case JUMP:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case MOVEtOtHE:
    case MOVEiNdIR:
    case JUMPtOtHE:
    case JUMPiNdIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
    case nombvp:
      truccion = guardarinstrp(variables,procedimientos,instruccionesproc);
                                                                                                                                                   listrucciones.add(truccion);
      label_12:
      while (true) {
        if (jj_2_12(2147483647)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(51);
        truccion = guardarinstrp(variables,procedimientos,instruccionesproc);
                                                                                                                                                                                                                                                                                                                           listrucciones.add(";"+truccion);
      }
                                                                                                                                                                                                                                                                                                                                                               String todas="";for(String struccion:listrucciones){todas+=truccion;}{if (true) return todas;}
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                     {if (true) return"";}
    throw new Error("Missing return statement in function");
  }

  final public String guardarinstrp(LinkedHashMap<String,Integer> variables, LinkedHashMap<String,LinkedHashMap<String,Integer>> procedimientos, LinkedHashMap<String,LinkedList<String >> instruccionesproc) throws ParseException {
        String variable;
        String variable1;
        int numero;
        int numero1;
        numero = -1;
        numero1 = -1;
        variable = "";
        variable1 = "";
        String instrucciones = "";
        String z = null;
        String or = null;
    if (jj_2_14(2147483647)) {
      variable = jj_consume_token(nombvp).image;
      jj_consume_token(56);
      numero = num();
                                               instrucciones=variable+"="+numero;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nombvp:
        jj_consume_token(nombvp);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          num();
          label_13:
          while (true) {
            if (jj_2_13(2147483647)) {
              ;
            } else {
              break label_13;
            }
            jj_consume_token(54);
            num();
          }
          break;
        default:
          jj_la1[126] = jj_gen;
          ;
        }

        break;
      case MOVE:
        jj_consume_token(MOVE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[127] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           if (variables.containsKey(z))
          {
                instrucciones="move"+":"+variables.get(z);
          }
          else
          {
                instrucciones="move"+":"+z;
          }
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[128] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        default:
          jj_la1[129] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z))
          {
                instrucciones="put"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="put"+":"+z+","+or;
          }
        break;
      case PICK:
        jj_consume_token(PICK);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[130] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BALLOONS:
          or = jj_consume_token(BALLOONS).image;
          break;
        case CHIPS:
          or = jj_consume_token(CHIPS).image;
          break;
        default:
          jj_la1[131] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (variables.containsKey(z))
          {
                instrucciones="pick"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="pick"+":"+z+","+or;
          }
        break;
      case MOVEtOtHE:
        jj_consume_token(MOVEtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="moveToThe"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="moveToThe"+":"+z+","+or;
          }
        break;
      case MOVEiNdIR:
        jj_consume_token(MOVEiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[135] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="moveInDir"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="moveInDir"+":"+z+","+or;
          }
        break;
      case JUMPtOtHE:
        jj_consume_token(JUMPtOtHE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          or = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          or = jj_consume_token(RIGHT).image;
          break;
        case FRONT:
          or = jj_consume_token(FRONT).image;
          break;
        case BACK:
          or = jj_consume_token(BACK).image;
          break;
        default:
          jj_la1[137] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="jumpToThe"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="jumpToThe"+":"+z+","+or;
          }
        break;
      case JUMPiNdIR:
        jj_consume_token(JUMPiNdIR);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          z = jj_consume_token(NUM).image;
          break;
        case nombvp:
          z = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[138] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          or = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          or = jj_consume_token(SOUTH).image;
          break;
        case WEST:
          or = jj_consume_token(WEST).image;
          break;
        case EAST:
          or = jj_consume_token(EAST).image;
          break;
        default:
          jj_la1[139] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if (variables.containsKey(z))
          {
                instrucciones="jumpInDir"+":"+variables.get(z)+","+or;
          }
          else
          {
                instrucciones="jumpInDir"+":"+z+","+or;
          }
        break;
      case ASSINGtO:
        jj_consume_token(ASSINGtO);
        jj_consume_token(57);
        numero = num();
        jj_consume_token(54);
        variable = jj_consume_token(nombvp).image;
          if (variables.containsKey(variable))
          {
                instrucciones="assignTo"+":"+numero+","+variable;
          }
        break;
      case JUMP:
        jj_consume_token(JUMP);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          numero = num();
          break;
        case nombvp:
          variable = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          numero1 = num();
          break;
        case nombvp:
          variable1 = jj_consume_token(nombvp).image;
          break;
        default:
          jj_la1[141] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (numero==-1 && numero1==-1)
          {
                instrucciones="JUMP"+":"+variable+","+variable1;
          }
          else if (numero==-1 && numero1!=-1)
          {
                instrucciones="JUMP"+":"+variable+","+numero1;
          }
          else if (numero!=-1 && numero1==-1)
          {
                instrucciones="JUMP"+":"+numero+","+variable1;
          }
          else
          {
                instrucciones="JUMP"+":"+numero+","+numero1;
          }
        break;
      case TURN:
        jj_consume_token(TURN);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
          variable = jj_consume_token(LEFT).image;
          break;
        case RIGHT:
          variable = jj_consume_token(RIGHT).image;
          break;
        case AROUND:
          variable = jj_consume_token(AROUND).image;
          break;
        default:
          jj_la1[142] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                instrucciones="turn"+":"+variable;
        break;
      case FACE:
        jj_consume_token(FACE);
        jj_consume_token(57);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORTH:
          variable = jj_consume_token(NORTH).image;
          break;
        case SOUTH:
          variable = jj_consume_token(SOUTH).image;
          break;
        case EAST:
          variable = jj_consume_token(EAST).image;
          break;
        case WEST:
          variable = jj_consume_token(WEST).image;
          break;
        default:
          jj_la1[143] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          if (numero==-1)
          {
                instrucciones="face"+":"+variable;
          }
        break;
      case NOP:
        jj_consume_token(NOP);
        jj_consume_token(57);
          instrucciones="nop"+":";
        break;
      case IF:
      case WHILE:
      case REPEAT:
        instrucciones = estrucontrolp(variables,procedimientos,instruccionesproc);
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return instrucciones;}
    throw new Error("Missing return statement in function");
  }

  final public boolean vDrop(int num) throws ParseException, Error {
        int x=(int)world.getPosition().getX();int y=(int)world.getPosition().getY();boolean f=world.blockedInRange(x,y,num,SOUTH);for(int i=y;i<9;i++){Point temp=new Point(x,i);if(world.chipExists(temp)){f=true;}}if(!f&&y+num<9){{if (true) return true;}}else{{if (true) return false;}}
    throw new Error("Missing return statement in function");
  }

  /**
   * Unsigned decimal number
   * 
   * @return the corresponding value of the string
   * @error corresponding value is too large
   */
  final public int num() throws ParseException, Error {
    int total=1;
    jj_consume_token(NUM);
                        try{total=Integer.parseInt(token.image);}catch(NumberFormatException ee){{if (true) throw new Error("Number out of bounds: "+token.image+" !!");}}{if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void put(int num, String Object) throws ParseException {
  if (Object.equals("balloons"))
  { System.out.println(world.getPosition().toString());
        world.putBalloons(num);
        System.out.println(world.getPosition().toString());}

  else if (Object.equals("chips"))
  {System.out.println(world.getPosition().toString());
  world.putChips(num);
  System.out.println(world.getPosition().toString());}
  }

  final public void pick(int num, String Object) throws ParseException {
  if (Object.equals("balloons"))
  {System.out.println(world.getPosition().toString());
  world.grabBalloons(num);
  System.out.println(world.getPosition().toString()); }

  else if (Object.equals("chips"))
  { System.out.println(world.getPosition().toString());
  world.pickChips(num);
  System.out.println(world.getPosition().toString()); }
  }

  final public void moveToThe(int num, String D) throws ParseException {
  if (D.equals("left")) {world.turnRight(); world.turnRight(); world.turnRight() ; world.moveForward(num,false);world.turnRight();  }
  else if (D.equals("right")) {world.turnRight(); world.moveForward(num,false); world.turnRight();world.turnRight();world.turnRight();}
  else if (D.equals("back")) { world.turnRight();world.turnRight(); world.moveForward(num,false); world.turnRight();world.turnRight(); }
  else if (D.equals("front")) { world.moveForward(num,false); }
  }

  final public void moveInDir(int num, String D) throws ParseException {
  if (D.equals("west")) {for (int i = 0; i<num; i++) {world.left(); } }
  else if (D.equals("east")) {for (int i = 0; i<num; i++) {world.right(); }}
  else if (D.equals("north")) {for (int i = 0; i<num; i++) {world.up() ;} }
  else if (D.equals("south")) { for (int i = 0; i<num; i++) {world.down() ;}}
  }

  final public void jumpToThe(int num, String D) throws ParseException {
  if (D.equals("left")) {world.turnRight(); world.turnRight(); world.turnRight() ; world.moveForward(num,true);world.turnRight();  }
  else if (D.equals("right")) {world.turnRight(); world.moveForward(num,true); world.turnRight();world.turnRight();world.turnRight();}
  else if (D.equals("back")) { world.turnRight();world.turnRight(); world.moveForward(num,true); world.turnRight();world.turnRight(); }
  else if (D.equals("front")) { world.moveForward(num,true); }
  }

  final public void jumpInDir(int num, String D) throws ParseException {
  if (D.equals("west")) {world.turnRight(); world.turnRight(); world.turnRight() ; world.moveForward(num,true);world.turnRight();  }
  else if (D.equals("east")) {world.turnRight(); world.moveForward(num,true); world.turnRight();world.turnRight();world.turnRight();}
  else if (D.equals("north"))
  { world.moveForward(num,true); }
  else if (D.equals("south")) { world.turnRight();world.turnRight(); world.moveForward(num,true); world.turnRight();world.turnRight(); }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(FACE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(CANmOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(TURN)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(JUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(JUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NOP)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(CANpICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(MOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(FACING)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(MOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(PICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(FACE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(CANpICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(CANpUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(CANjUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(CANmOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(CANjUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(CANmOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(FACING)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(CANpUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    if (jj_scan_token(THEN)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(NOP)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(JUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(JUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(MOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(MOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(PICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(PUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(TURN)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(JUMP)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(ASSINGtO)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(JUMP)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(CANpICK)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(CANpUT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ASSINGtO)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(CANjUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(CANmOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(CANjUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(FACING)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(CANmOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(CANjUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(CANpICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(CANpUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(CANjUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(CANmOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(CANjUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(FACING)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(CANmOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    if (jj_scan_token(THEN)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    if (jj_scan_token(THEN)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(CANjUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(NOP)) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(FACE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TURN)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(JUMP)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(ASSINGtO)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(nombvp)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(JUMPiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(JUMPtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(MOVEiNdIR)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(MOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(CANmOVEtOtHE)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(PICK)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(PUT)) return true;
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    if (jj_scan_token(54)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(nombvp)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[145];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x21,0x0,0x80,0x0,0xc0,0x0,0x0,0x0,0x0,0x801fff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x801fff00,0x7f800000,0x7f800000,0x80100000,0x0,0x801fff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x801fff00,0x7f800000,0x7f800000,0x0,0x80100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f800000,0x0,0x0,0x801fff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x801fff00,0x7f800000,0x7f800000,0x0,0x80100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f800000,0x801fff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x801fff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40000,0x0,0x40000,0x0,0x40000,0x100000,0x800000,0x80000,0x40002,0x42000,0x42000,0x42000,0x42000,0x1800,0x42000,0x1800,0x42000,0x3c,0x42000,0x780,0x42000,0x3c,0x42000,0x780,0x4c,0x780,0x42000,0x42000,0x42000,0x40002,0x0,0x0,0x2,0x100000,0x40002,0x800000,0x42000,0x42000,0x42000,0x4c,0x780,0x42000,0x1800,0x42000,0x1800,0x42000,0x3c,0x42000,0x780,0x42000,0x3c,0x42000,0x780,0x2000,0x40002,0x0,0x0,0x42000,0x2,0x780,0x780,0x780,0x3c,0x3c,0x42000,0x1800,0x42000,0x1800,0x0,0x780,0x780,0x3c,0x780,0x3c,0x42000,0x1800,0x42000,0x1800,0x0,0x100000,0x800000,0x40002,0x2000,0x42000,0x42000,0x1800,0x42000,0x1800,0x42000,0x3c,0x42000,0x780,0x42000,0x3c,0x42000,0x780,0x42000,0x42000,0x4c,0x780,0x40002,0x0,0x0,0x42000,0x2,0x780,0x780,0x780,0x3c,0x3c,0x42000,0x1800,0x42000,0x1800,0x0,0x780,0x780,0x780,0x3c,0x3c,0x1800,0x1800,0x0,0x40002,0x2000,0x42000,0x42000,0x1800,0x42000,0x1800,0x42000,0x3c,0x42000,0x780,0x42000,0x3c,0x42000,0x780,0x42000,0x42000,0x4c,0x780,0x40002,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 145; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 145; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
